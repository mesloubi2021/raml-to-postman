#!/usr/bin/env node

var program = require('commander');
var Converter = require('../convert.js');
var fs = require('fs');
var path = require('path');
var _ = require('lodash').noConflict();

function parseArguments() {
    program
        .version('0.0.1')
        .usage('[option]')
        .option('-s, --spec <file>', 'Convert a given RAML spec to a POSTMan collection')
        .option('-o, --output <file>', 'Store the collection in a file')
        .option('-g, --group', 'Group the requests into folders')
        .option('-t, --test', 'Test the converter')
        .option('-p, --pretty', 'Pretty print the json file');

    program.on('--help', function() {
        console.log('   Converts a RAML API spec to a POSTMan collection');
        console.log('');
        console.log('   Examples:');
        console.log('       Read spec.raml and store the output in output.json after grouping the requests into folders');
        console.log('           ./raml2postman -s spec.raml -o output.json -g');
        console.log('');
        console.log('       Read spec.raml and print the output to the console');
        console.log('           ./raml2postman -s spec.raml');
        console.log('');
        console.log('       Read spec.raml and print the prettified output to the console');
        console.log('           ./raml2postman -s spec.raml -p');
        console.log('');
    });

    program.parse(process.argv);

    var inputFile = program.spec;
    var outputFile = program.output || false;
    var group = program.group || false;
    var prettyPrint = program.pretty || false;
    var test = program.test || false;
    var ramlInput = fs.readFileSync('sample_files/apptest.raml');

    if (test) {

        // file, options, callback
        Converter.parseString(ramlInput, function(output, environment) {
            var data;
            var env;

            try {
                data = JSON.parse(fs.readFileSync('sample_files/github.json', 'utf-8'));
                env = JSON.parse(fs.readFileSync('sample_files/github-environment.json'), 'utf-8');
            } catch (err) {
                console.log(err);
                process.exit(1);
            }

            if (_.isEqual(output, data)) {
                if(_.isEqual(environment, env)){
                    console.log('Test has passed');    
                }else{
                    console.log('Generated environment file does not match expected environment, test has failed');
                }
            } else {
                console.log("OUTPUT:  " , output);
                //console.log("DATA: " , data);
                console.log('Generated collection does not match expected collection, test has failed');
            }
            process.exit(0);
        });
    }

    function callback(output, environment) {
        if (outputFile) {

            var file = path.resolve(outputFile);

            var envFileName = path.basename(file, '.json') + "-environment.json"
            var envFile = path.join(path.dirname(file), envFileName);

            try {
                fs.writeFileSync(envFile, JSON.stringify(environment, null, 4));
            } catch (err) {
                console.log("Could not write to environment file");
                console.log(err);
                process.exit(1);
            }

            if(path.extname(file) !== '.json'){
                file += '.json';
            }

            try {
                if (prettyPrint) {
                    fs.writeFileSync(file, JSON.stringify(output, null, 4));
                } else {
                    fs.writeFileSync(file, JSON.stringify(output));
                }
                
                console.log("Output written to " + file);
            } catch (err) {
                console.log("Could not write to file");
                console.log(err);
                process.exit(1);
            }
        } else {
            console.log(output);
            process.exit(0);
        }
    }

    if (!test) {
        if (inputFile) {
            // file, options, callback
            Converter._convert(inputFile, {
                group: group,
                test: false
            }, callback);
        } else {
            program.emit('--help');
            process.exit(1);
        }
    }
}

parseArguments();
